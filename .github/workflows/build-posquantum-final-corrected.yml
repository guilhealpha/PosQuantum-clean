name: Build PosQuantum Desktop - FINAL CORRECTED

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'
  QT_QPA_PLATFORM: 'offscreen'

jobs:
  validate-code:
    name: Validate Code Structure
    runs-on: ubuntu-22.04
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Validate main.py exists
      run: |
        if [ ! -f main.py ]; then
          echo "‚ùå main.py not found"
          exit 1
        fi
        echo "‚úÖ main.py found ($(wc -l < main.py) lines)"
        
    - name: Validate Python syntax
      run: |
        python3 -m py_compile main.py
        echo "‚úÖ Python syntax valid"

  test-imports:
    name: Test Imports
    runs-on: ubuntu-22.04
    needs: validate-code
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y xvfb libxcb-xinerama0 libxcb-cursor0 libxkbcommon-x11-0
        
    - name: Create requirements.txt
      run: |
        cat > requirements.txt << EOF
        PyQt6==6.6.1
        cryptography==41.0.7
        requests==2.31.0
        numpy==1.24.3
        scikit-learn==1.3.0
        pyinstaller==6.3.0
        psutil==5.9.5
        EOF
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Create required directories
      run: |
        mkdir -p posquantum_modules/core
        touch posquantum_modules/__init__.py
        touch posquantum_modules/core/__init__.py
        
    - name: Test import with detailed logging
      run: |
        export QT_QPA_PLATFORM=offscreen
        python -c "import main; print('‚úÖ Import successful')"

  build-executables:
    name: Build Executables
    strategy:
      matrix:
        os: [ubuntu-22.04, windows-latest]
    runs-on: ${{ matrix.os }}
    needs: test-imports
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install system dependencies (Linux)
      if: matrix.os == 'ubuntu-22.04'
      run: |
        sudo apt-get update
        sudo apt-get install -y xvfb libxcb-xinerama0 libxcb-cursor0 libxkbcommon-x11-0
        
    - name: Create requirements.txt
      run: |
        cat > requirements.txt << EOF
        PyQt6==6.6.1
        cryptography==41.0.7
        requests==2.31.0
        numpy==1.24.3
        scikit-learn==1.3.0
        pyinstaller==6.3.0
        psutil==5.9.5
        EOF
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Create required directories
      run: |
        mkdir -p posquantum_modules/core
        touch posquantum_modules/__init__.py
        touch posquantum_modules/core/__init__.py
        
    - name: Test import before build (Linux)
      if: matrix.os == 'ubuntu-22.04'
      run: |
        export QT_QPA_PLATFORM=offscreen
        python -c "import main; print('‚úÖ Import test passed')"
        
    - name: Test import before build (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        $env:QT_QPA_PLATFORM = "offscreen"
        python -c "import main; print('‚úÖ Import test passed')"
        
    - name: Build executable (Linux)
      if: matrix.os == 'ubuntu-22.04'
      run: |
        export QT_QPA_PLATFORM=offscreen
        export DISPLAY=:99
        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
        sleep 2
        pyinstaller --onefile --name=PosQuantumDesktop-Linux \
          --add-data="posquantum_modules:posquantum_modules" \
          --hidden-import=PyQt6.QtCore \
          --hidden-import=PyQt6.QtGui \
          --hidden-import=PyQt6.QtWidgets \
          --hidden-import=cryptography \
          --collect-all=PyQt6 \
          main.py
          
    - name: Build executable (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        $env:QT_QPA_PLATFORM = "offscreen"
        pyinstaller --onefile --name=PosQuantumDesktop-Windows `
          --add-data="posquantum_modules;posquantum_modules" `
          --hidden-import=PyQt6.QtCore `
          --hidden-import=PyQt6.QtGui `
          --hidden-import=PyQt6.QtWidgets `
          --hidden-import=cryptography `
          --collect-all=PyQt6 `
          main.py
          
    - name: Verify executable (Linux)
      if: matrix.os == 'ubuntu-22.04'
      run: |
        if [ -f dist/PosQuantumDesktop-Linux ]; then
          echo "‚úÖ Linux executable created"
          ls -la dist/PosQuantumDesktop-Linux
        else
          echo "‚ùå Linux executable not found"
          exit 1
        fi
        
    - name: Verify executable (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        if (Test-Path dist\PosQuantumDesktop-Windows.exe) {
          Write-Host "‚úÖ Windows executable created"
          Get-ChildItem dist\PosQuantumDesktop-Windows.exe
        } else {
          Write-Host "‚ùå Windows executable not found"
          exit 1
        }
        
    - name: Upload executable
      uses: actions/upload-artifact@v4
      with:
        name: PosQuantumDesktop-${{ matrix.os }}
        path: |
          dist/PosQuantumDesktop-Linux
          dist/PosQuantumDesktop-Windows.exe

  create-release:
    name: Create Release
    runs-on: ubuntu-22.04
    needs: build-executables
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts/
        
    - name: List artifacts
      run: |
        echo "üì¶ Downloaded artifacts:"
        find ./artifacts/ -type f -exec ls -la {} \;
        
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: PosQuantum Desktop v${{ github.run_number }}
        body: |
          ## üöÄ PosQuantum Desktop Release v${{ github.run_number }}
          
          ### ‚ú® Features:
          - üîê Post-quantum cryptography implementation
          - üñ•Ô∏è Cross-platform desktop application  
          - üîß Windows and Linux executables
          - üõ°Ô∏è Advanced security features
          
          ### üì• Downloads:
          - **Windows:** PosQuantumDesktop-Windows.exe
          - **Linux:** PosQuantumDesktop-Linux
          
          ### üîß Installation:
          1. Download the appropriate executable for your platform
          2. Run the executable directly (no installation required)
          3. Enjoy post-quantum security! üõ°Ô∏è
          
          **Built from commit:** ${{ github.sha }}
          **Build date:** ${{ github.run_id }}
        draft: false
        prerelease: false

