name: 🚀 Build PosQuantum Desktop - FIXED WORKING

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  APP_NAME: PosQuantumDesktop
  APP_VERSION: '3.0.0'

jobs:
  test:
    name: 🧪 Run Tests
    runs-on: ubuntu-22.04
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 🔧 Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y xvfb libxcb-xinerama0 libxcb-cursor0 libxkbcommon-x11-0
        
    - name: ⚡ Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
        
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install PyQt6==6.6.1 cryptography==41.0.7 requests==2.31.0 pyinstaller==6.3.0
        
    - name: 🧪 Test basic imports
      run: |
        export QT_QPA_PLATFORM=offscreen
        python -c "
        try:
            import sys
            print('Python version:', sys.version)
            import PyQt6.QtCore
            print('PyQt6 imported successfully')
            import cryptography
            print('Cryptography imported successfully')
            print('[✅] All basic imports successful')
        except Exception as e:
            print(f'[❌] Import failed: {e}')
            exit(1)
        "

  build-windows:
    name: 🏗️ Build Windows Executable
    runs-on: windows-latest
    needs: test
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: ⚡ Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~\AppData\Local\pip\Cache
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
        
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install PyQt6==6.6.1 cryptography==41.0.7 requests==2.31.0 pyinstaller==6.3.0
        
    - name: 🧪 Test imports on Windows
      run: |
        python -c "
        try:
            import sys
            print('Python version:', sys.version)
            import PyQt6.QtCore
            print('PyQt6 imported successfully')
            import cryptography
            print('Cryptography imported successfully')
            print('[OK] All imports successful on Windows')
        except Exception as e:
            print(f'[ERROR] Import failed: {e}')
            exit(1)
        "
        
    - name: 🏗️ Build executable with PyInstaller
      run: |
        pyinstaller --onefile --windowed --name=${{ env.APP_NAME }} --distpath=dist --workpath=build --specpath=. main.py
        
    - name: ✅ Verify executable creation
      run: |
        if (Test-Path "dist\${{ env.APP_NAME }}.exe") {
          Write-Host "[✅] Windows executable created successfully"
          $fileInfo = Get-Item "dist\${{ env.APP_NAME }}.exe"
          Write-Host "File size: $([math]::Round($fileInfo.Length / 1MB, 2)) MB"
          Write-Host "File path: $($fileInfo.FullName)"
        } else {
          Write-Host "[❌] Windows executable not found"
          if (Test-Path dist) {
            Write-Host "Contents of dist directory:"
            Get-ChildItem dist
          }
          exit 1
        }
        
    - name: 📤 Upload Windows executable
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.APP_NAME }}-Windows-v${{ env.APP_VERSION }}
        path: dist/${{ env.APP_NAME }}.exe
        retention-days: 30

  build-linux:
    name: 🐧 Build Linux Executable
    runs-on: ubuntu-22.04
    needs: test
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 🔧 Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y xvfb libxcb-xinerama0 libxcb-cursor0 libxkbcommon-x11-0
        
    - name: ⚡ Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
        
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install PyQt6==6.6.1 cryptography==41.0.7 requests==2.31.0 pyinstaller==6.3.0
        
    - name: 🧪 Test basic imports
      run: |
        export QT_QPA_PLATFORM=offscreen
        python -c "
        try:
            import sys
            print('Python version:', sys.version)
            import PyQt6.QtCore
            print('PyQt6 imported successfully')
            import cryptography
            print('Cryptography imported successfully')
            print('[OK] All basic imports successful')
        except Exception as e:
            print(f'[ERROR] Import failed: {e}')
            exit(1)
        "
        
    - name: 🏗️ Build executable with PyInstaller
      run: |
        export QT_QPA_PLATFORM=offscreen
        export DISPLAY=:99
        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
        sleep 2
        pyinstaller --onefile --name=${{ env.APP_NAME }} --distpath=dist --workpath=build --specpath=. main.py
        
    - name: ✅ Verify executable creation
      run: |
        if [ -f "dist/${{ env.APP_NAME }}" ]; then
          echo "[✅] Linux executable created successfully"
          ls -la "dist/${{ env.APP_NAME }}"
          file "dist/${{ env.APP_NAME }}"
          echo "File size: $(du -h dist/${{ env.APP_NAME }} | cut -f1)"
        else
          echo "[❌] Linux executable not found"
          if [ -d dist ]; then
            echo "Contents of dist directory:"
            ls -la dist/
          fi
          exit 1
        fi
        
    - name: 📤 Upload Linux executable
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.APP_NAME }}-Linux-v${{ env.APP_VERSION }}
        path: dist/${{ env.APP_NAME }}
        retention-days: 30

  create-release:
    name: 🚀 Create Release
    runs-on: ubuntu-22.04
    needs: [build-windows, build-linux]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      
    - name: 📥 Download Windows executable
      uses: actions/download-artifact@v4
      with:
        name: ${{ env.APP_NAME }}-Windows-v${{ env.APP_VERSION }}
        path: ./release/windows/
        
    - name: 📥 Download Linux executable
      uses: actions/download-artifact@v4
      with:
        name: ${{ env.APP_NAME }}-Linux-v${{ env.APP_VERSION }}
        path: ./release/linux/
        
    - name: 📋 Verify downloaded files
      run: |
        echo "Verifying downloaded artifacts..."
        ls -la release/
        if [ -f "release/windows/${{ env.APP_NAME }}.exe" ]; then
          echo "[✅] Windows executable found"
          ls -la "release/windows/${{ env.APP_NAME }}.exe"
        else
          echo "[❌] Windows executable not found"
          ls -la release/windows/
        fi
        
        if [ -f "release/linux/${{ env.APP_NAME }}" ]; then
          echo "[✅] Linux executable found"
          ls -la "release/linux/${{ env.APP_NAME }}"
        else
          echo "[❌] Linux executable not found"
          ls -la release/linux/
        fi
        
    - name: 🏷️ Create Release
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ env.APP_VERSION }}-${{ github.run_number }}
        name: PosQuantum Desktop v${{ env.APP_VERSION }}-${{ github.run_number }}
        body: |
          ## 🚀 PosQuantum Desktop Release v${{ env.APP_VERSION }}-${{ github.run_number }}
          
          ### ✨ Features:
          - 🔐 Post-quantum cryptography implementation
          - 🖥️ Cross-platform desktop application
          - 🪟 Windows and 🐧 Linux executables
          - 🛡️ Advanced security features
          
          ### 📥 Downloads:
          - **Windows**: PosQuantumDesktop.exe
          - **Linux**: PosQuantumDesktop
          
          ### 🔧 Installation:
          1. Download the appropriate executable for your platform
          2. Run the executable directly (no installation required)
          3. For Linux: `chmod +x PosQuantumDesktop && ./PosQuantumDesktop`
          
          ### 📊 Build Info:
          - **Commit**: ${{ github.sha }}
          - **Build Date**: ${{ github.run_started_at }}
          - **Python Version**: ${{ env.PYTHON_VERSION }}
          
          ### 🎯 Status: ✅ WORKING BUILD
        files: |
          release/windows/${{ env.APP_NAME }}.exe
          release/linux/${{ env.APP_NAME }}
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-summary:
    name: 📊 Build Summary
    needs: [test, build-windows, build-linux]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: 📋 Display Build Results
      run: |
        echo "🏆 PosQuantum Desktop Build Summary"
        echo "=================================="
        echo "✅ Test Job: ${{ needs.test.result }}"
        echo "🪟 Windows Build: ${{ needs.build-windows.result }}"
        echo "🐧 Linux Build: ${{ needs.build-linux.result }}"
        echo "📅 Build Date: $(date)"
        echo "🏷️ Version: ${{ env.APP_VERSION }}"
        
        if [ "${{ needs.test.result }}" == "success" ] && [ "${{ needs.build-windows.result }}" == "success" ] && [ "${{ needs.build-linux.result }}" == "success" ]; then
          echo "🎉 ALL BUILDS SUCCESSFUL! 🎉"
          echo "📦 Executables are ready for download in the 'Artifacts' section."
        else
          echo "❌ Some builds failed. Check the logs above for details."
        fi

