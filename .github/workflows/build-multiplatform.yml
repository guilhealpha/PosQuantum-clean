name: Build PosQuantum

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    name: Build on ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            platform: windows
            executable: PosQuantum-3.0.exe
            artifact: PosQuantum-Windows
            separator: ";"
          - os: ubuntu-latest
            platform: linux
            executable: PosQuantum-3.0
            artifact: PosQuantum-Linux
            separator: ":"
          - os: macos-latest
            platform: macos
            executable: PosQuantum-3.0
            artifact: PosQuantum-macOS
            separator: ":"
    runs-on: ${{ matrix.os }}
    
    permissions:
      contents: write
      packages: write
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.POSQUANTUM_TOKEN }}
          
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          pip install PyQt6
          pip install -r requirements.txt
          
      - name: Create runtime hooks
        run: |
          mkdir -p hooks
          echo '# -*- coding: utf-8 -*-
          """
          Hook de runtime corrigido para o PosQuantum
          
          Este hook é executado pelo PyInstaller durante a inicialização do aplicativo
          para garantir que todos os módulos sejam carregados corretamente.
          """
          
          import os
          import sys
          import importlib
          import importlib.util
          import importlib.machinery
          
          # Corrigir sys.path antes de qualquer importação
          def fix_sys_path():
              """Corrige sys.path para garantir que todos os módulos sejam encontrados"""
              if hasattr(sys, "_MEIPASS"):
                  # Executando a partir do executável PyInstaller
                  base_dir = sys._MEIPASS
              else:
                  # Executando a partir do script
                  base_dir = os.path.dirname(os.path.abspath(__file__))
              
              # Adicionar diretório base ao path
              if base_dir not in sys.path:
                  sys.path.insert(0, base_dir)
              
              # Adicionar diretórios de módulos ao path
              module_dirs = [
                  os.path.join(base_dir, "posquantum_modules"),
                  os.path.join(base_dir, "posquantum_modules", "crypto"),
                  os.path.join(base_dir, "posquantum_modules", "network"),
                  os.path.join(base_dir, "posquantum_modules", "compliance"),
                  os.path.join(base_dir, "posquantum_modules", "core"),
                  os.path.join(base_dir, "posquantum_modules", "security"),
                  os.path.join(base_dir, "posquantum_modules", "ui")
              ]
              
              for module_dir in module_dirs:
                  if os.path.exists(module_dir) and module_dir not in sys.path:
                      sys.path.insert(0, module_dir)
              
              return base_dir
          
          # Corrigir sys.path
          base_dir = fix_sys_path()
          
          # Configurar variáveis de ambiente
          os.environ["POSQUANTUM_BASE_DIR"] = base_dir
          
          # Importar módulos principais
          try:
              # Verificar se os módulos existem
              module_path = os.path.join(base_dir, "posquantum_modules")
              if os.path.exists(module_path):
                  # Importar módulos principais
                  import posquantum_modules
                  import posquantum_modules.crypto
                  import posquantum_modules.network
                  import posquantum_modules.compliance
                  import posquantum_modules.core
                  import posquantum_modules.security
                  import posquantum_modules.ui
          except Exception as e:
              print(f"Erro ao importar módulos principais: {e}")
          
          # Debug completo
          print("Runtime hook executado com sucesso")
          print(f"sys.path: {sys.path}")
          print(f"Diretório base: {base_dir}")
          print(f"Módulos disponíveis: {os.listdir(base_dir) if os.path.exists(base_dir) else "Diretório base não encontrado"}")' > hooks/runtime_hook.py
          
      - name: Build with PyInstaller
        run: |
          python -m PyInstaller --clean --noconfirm --onefile --name="PosQuantum-3.0" --add-data="assets${{ matrix.separator }}assets" --add-data="posquantum_modules${{ matrix.separator }}posquantum_modules" --hidden-import="PyQt6.QtCore" --hidden-import="PyQt6.QtGui" --hidden-import="PyQt6.QtWidgets" --hidden-import="posquantum_modules.crypto" --hidden-import="posquantum_modules.network" --hidden-import="posquantum_modules.compliance" --hidden-import="posquantum_modules.core" --hidden-import="posquantum_modules.security" --hidden-import="posquantum_modules.ui" --hidden-import="posquantum_modules.crypto.ml_kem" --hidden-import="posquantum_modules.crypto.ml_dsa" --hidden-import="posquantum_modules.crypto.sphincs_plus" --hidden-import="posquantum_modules.crypto.elliptic_curve_pq_hybrid" --hidden-import="posquantum_modules.crypto.hsm_virtual" --hidden-import="posquantum_modules.network.vpn_pq" --hidden-import="posquantum_modules.compliance.certifications" --hidden-import="posquantum_modules.core.blockchain_real_implementation_clean" --hidden-import="posquantum_modules.core.crypto_real_implementation_clean" --hidden-import="posquantum_modules.core.dashboard_real_implementation_clean" --hidden-import="posquantum_modules.core.i18n_system" --runtime-hook="hooks/runtime_hook.py" main.py
          
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact }}
          path: dist/${{ matrix.executable }}
          
      - name: Create Release
        if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          token: ${{ secrets.POSQUANTUM_TOKEN }}
          tag_name: v3.0-${{ github.run_number }}
          name: PosQuantum v3.0 Build ${{ github.run_number }}
          draft: false
          prerelease: false
          body: |
            PosQuantum v3.0 - Sistema de Segurança Pós-Quântica
            
            Build automático gerado pelo GitHub Actions.
            
            Plataformas disponíveis:
            - Windows
            - Linux
            - macOS
            
            Todas as funcionalidades implementadas com criptografia pós-quântica em todas as camadas.
          files: |
            dist/${{ matrix.executable }}

