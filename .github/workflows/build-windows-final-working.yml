name: Build PosQuantum Desktop - FINAL WORKING

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-22.04
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y xvfb libxcb-xinerama0 libxcb-cursor0 libxkbcommon-x11-0
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
        
    - name: Create requirements.txt if missing
      run: |
        if [ ! -f requirements.txt ]; then
          echo "Creating basic requirements.txt"
          cat > requirements.txt << EOF
        PyQt6==6.6.1
        cryptography==41.0.7
        requests==2.31.0
        numpy==1.24.3
        scikit-learn==1.3.0
        pyinstaller==6.3.0
        EOF
        fi
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Create missing directories and files
      run: |
        mkdir -p posquantum_modules/core
        touch posquantum_modules/__init__.py
        touch posquantum_modules/core/__init__.py
        
    - name: Test imports before build
      run: |
        export QT_QPA_PLATFORM=offscreen
        export DISPLAY=:99
        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
        sleep 2
        python main.py
        echo "Import test completed successfully"

  build-windows:
    name: Build Windows Executable
    runs-on: windows-latest
    needs: test
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~\AppData\Local\pip\Cache
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
        
    - name: Create requirements.txt if missing
      run: |
        if (!(Test-Path requirements.txt)) {
          Write-Host "Creating basic requirements.txt"
          @"
        PyQt6==6.6.1
        cryptography==41.0.7
        requests==2.31.0
        numpy==1.24.3
        scikit-learn==1.3.0
        pyinstaller==6.3.0
        "@ | Out-File -FilePath requirements.txt -Encoding utf8
        }
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Create missing directories and files
      run: |
        if (!(Test-Path posquantum_modules)) { New-Item -ItemType Directory -Path posquantum_modules }
        if (!(Test-Path posquantum_modules\core)) { New-Item -ItemType Directory -Path posquantum_modules\core }
        if (!(Test-Path posquantum_modules\__init__.py)) { New-Item -ItemType File -Path posquantum_modules\__init__.py }
        if (!(Test-Path posquantum_modules\core\__init__.py)) { New-Item -ItemType File -Path posquantum_modules\core\__init__.py }
        
    - name: Test imports before build
      run: |
        $env:QT_QPA_PLATFORM = "offscreen"
        python main.py
        Write-Host "Import test completed successfully"
        
    - name: Create PyInstaller spec file
      run: |
        python -c "
        import PyInstaller.__main__
        PyInstaller.__main__.run([
            '--name=PosQuantumDesktop',
            '--onefile',
            '--windowed',
            '--add-data=posquantum_modules;posquantum_modules',
            '--hidden-import=PyQt6.QtCore',
            '--hidden-import=PyQt6.QtGui', 
            '--hidden-import=PyQt6.QtWidgets',
            '--hidden-import=cryptography',
            '--collect-all=PyQt6',
            'main.py'
        ])
        "
        
    - name: Verify executable creation
      run: |
        if (Test-Path dist\PosQuantumDesktop.exe) {
          Write-Host "Windows executable created successfully"
          Get-ChildItem dist\PosQuantumDesktop.exe | Format-List
        } else {
          Write-Host "Windows executable not found"
          Get-ChildItem dist\
          exit 1
        }
        
    - name: Upload Windows executable
      uses: actions/upload-artifact@v4
      with:
        name: PosQuantumDesktop-Windows
        path: dist/PosQuantumDesktop.exe

  build-linux:
    name: Build Linux Executable
    runs-on: ubuntu-22.04
    needs: test
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y xvfb libxcb-xinerama0 libxcb-cursor0 libxkbcommon-x11-0
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
        
    - name: Create requirements.txt if missing
      run: |
        if [ ! -f requirements.txt ]; then
          echo "Creating basic requirements.txt"
          cat > requirements.txt << EOF
        PyQt6==6.6.1
        cryptography==41.0.7
        requests==2.31.0
        numpy==1.24.3
        scikit-learn==1.3.0
        pyinstaller==6.3.0
        EOF
        fi
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Create missing directories and files
      run: |
        mkdir -p posquantum_modules/core
        touch posquantum_modules/__init__.py
        touch posquantum_modules/core/__init__.py
        
    - name: Test imports before build
      run: |
        export QT_QPA_PLATFORM=offscreen
        export DISPLAY=:99
        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
        sleep 2
        python main.py
        echo "Import test completed successfully"
        
    - name: Build executable with PyInstaller
      run: |
        export QT_QPA_PLATFORM=offscreen
        export DISPLAY=:99
        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
        sleep 2
        pyinstaller --onefile --name=PosQuantumDesktop \
          --add-data="posquantum_modules:posquantum_modules" \
          --hidden-import=PyQt6.QtCore \
          --hidden-import=PyQt6.QtGui \
          --hidden-import=PyQt6.QtWidgets \
          --hidden-import=cryptography \
          --collect-all=PyQt6 \
          main.py
        
    - name: Verify executable creation
      run: |
        if [ -f dist/PosQuantumDesktop ]; then
          echo "Linux executable created successfully"
          ls -la dist/PosQuantumDesktop
          file dist/PosQuantumDesktop
        else
          echo "Linux executable not found"
          ls -la dist/
          exit 1
        fi
        
    - name: Upload Linux executable
      uses: actions/upload-artifact@v4
      with:
        name: PosQuantumDesktop-Linux
        path: dist/PosQuantumDesktop

  create-release:
    name: Create Release
    runs-on: ubuntu-22.04
    needs: [build-windows, build-linux]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Download Windows executable
      uses: actions/download-artifact@v4
      with:
        name: PosQuantumDesktop-Windows
        path: ./artifacts/windows/
        
    - name: Download Linux executable
      uses: actions/download-artifact@v4
      with:
        name: PosQuantumDesktop-Linux
        path: ./artifacts/linux/
        
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: PosQuantum Desktop v${{ github.run_number }}
        body: |
          ## PosQuantum Desktop Release v${{ github.run_number }}
          
          ### Features:
          - Post-quantum cryptography implementation
          - Cross-platform desktop application
          - Windows and Linux executables
          
          ### Downloads:
          - Windows: PosQuantumDesktop.exe
          - Linux: PosQuantumDesktop
          
          ### Installation:
          1. Download the appropriate executable for your platform
          2. Run the executable directly (no installation required)
          
          Built from commit: ${{ github.sha }}
        draft: false
        prerelease: false
        
    - name: Upload Windows Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifacts/windows/PosQuantumDesktop.exe
        asset_name: PosQuantumDesktop-Windows.exe
        asset_content_type: application/octet-stream
        
    - name: Upload Linux Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifacts/linux/PosQuantumDesktop
        asset_name: PosQuantumDesktop-Linux
        asset_content_type: application/octet-stream

