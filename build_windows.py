#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Script de Build para PosQuantum Windows
Gera o execut√°vel PosQuantum.exe com todas as funcionalidades
"""

import os
import sys
import subprocess
import shutil
from pathlib import Path

def check_requirements():
    """Verifica se todos os requisitos est√£o instalados"""
    print("üîç Verificando requisitos...")
    
    try:
        import PyInstaller
        print(f"‚úÖ PyInstaller: {PyInstaller.__version__}")
    except ImportError:
        print("‚ùå PyInstaller n√£o encontrado. Instalando...")
        subprocess.run([sys.executable, "-m", "pip", "install", "pyinstaller"], check=True)
    
    try:
        import PyQt6
        print(f"‚úÖ PyQt6: {PyQt6.QtCore.QT_VERSION_STR}")
    except ImportError:
        print("‚ùå PyQt6 n√£o encontrado. Instalando...")
        subprocess.run([sys.executable, "-m", "pip", "install", "PyQt6"], check=True)
    
    # Instalar requirements.txt se existir
    if os.path.exists("requirements.txt"):
        print("üì¶ Instalando depend√™ncias do requirements.txt...")
        subprocess.run([sys.executable, "-m", "pip", "install", "-r", "requirements.txt"], check=True)

def prepare_build():
    """Prepara o ambiente para o build"""
    print("üîß Preparando ambiente de build...")
    
    # Criar diret√≥rio hooks se n√£o existir
    hooks_dir = Path("hooks")
    hooks_dir.mkdir(exist_ok=True)
    
    # Limpar builds anteriores
    if os.path.exists("dist"):
        shutil.rmtree("dist")
        print("üóëÔ∏è Diret√≥rio dist limpo")
    
    if os.path.exists("build"):
        shutil.rmtree("build")
        print("üóëÔ∏è Diret√≥rio build limpo")
    
    # Verificar se main.py existe
    if not os.path.exists("main.py"):
        print("‚ùå Arquivo main.py n√£o encontrado!")
        return False
    
    # Verificar se posquantum_modules existe
    if not os.path.exists("posquantum_modules"):
        print("‚ùå Diret√≥rio posquantum_modules n√£o encontrado!")
        return False
    
    print("‚úÖ Ambiente preparado com sucesso")
    return True

def build_executable():
    """Constr√≥i o execut√°vel usando PyInstaller"""
    print("üöÄ Iniciando build do execut√°vel...")
    
    # Comando PyInstaller otimizado
    cmd = [
        sys.executable, "-m", "PyInstaller",
        "--clean",
        "--noconfirm",
        "--onefile",
        "--name=PosQuantum",
        "--add-data=posquantum_modules;posquantum_modules",
        
        # Hidden imports para PyQt6
        "--hidden-import=PyQt6.QtCore",
        "--hidden-import=PyQt6.QtGui",
        "--hidden-import=PyQt6.QtWidgets",
        "--hidden-import=PyQt6.QtNetwork",
        
        # Hidden imports para m√≥dulos principais
        "--hidden-import=posquantum_modules",
        "--hidden-import=posquantum_modules.crypto",
        "--hidden-import=posquantum_modules.network",
        "--hidden-import=posquantum_modules.compliance",
        "--hidden-import=posquantum_modules.core",
        "--hidden-import=posquantum_modules.security",
        "--hidden-import=posquantum_modules.ui",
        
        # Hidden imports para m√≥dulos espec√≠ficos
        "--hidden-import=posquantum_modules.crypto.ml_kem",
        "--hidden-import=posquantum_modules.crypto.ml_dsa",
        "--hidden-import=posquantum_modules.crypto.sphincs_plus",
        "--hidden-import=posquantum_modules.crypto.elliptic_curve_pq_hybrid",
        "--hidden-import=posquantum_modules.crypto.hsm_virtual",
        "--hidden-import=posquantum_modules.network.vpn_pq",
        "--hidden-import=posquantum_modules.compliance.certifications",
        
        # Runtime hook
        "--runtime-hook=hooks/runtime_hook.py",
        
        # Arquivo principal
        "main.py"
    ]
    
    print("üìù Comando PyInstaller:")
    print(" ".join(cmd))
    print()
    
    try:
        result = subprocess.run(cmd, check=True, capture_output=True, text=True)
        print("‚úÖ Build conclu√≠do com sucesso!")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erro no build: {e}")
        print(f"Stdout: {e.stdout}")
        print(f"Stderr: {e.stderr}")
        return False

def verify_executable():
    """Verifica se o execut√°vel foi criado corretamente"""
    print("üîç Verificando execut√°vel...")
    
    exe_path = Path("dist/PosQuantum.exe")
    
    if not exe_path.exists():
        print("‚ùå Execut√°vel PosQuantum.exe n√£o foi criado!")
        return False
    
    # Verificar tamanho do arquivo
    size_mb = exe_path.stat().st_size / (1024 * 1024)
    print(f"‚úÖ Execut√°vel criado: {exe_path}")
    print(f"üìè Tamanho: {size_mb:.1f} MB")
    
    if size_mb < 10:
        print("‚ö†Ô∏è Aviso: Execut√°vel muito pequeno, pode estar faltando m√≥dulos")
    elif size_mb > 100:
        print("‚ö†Ô∏è Aviso: Execut√°vel muito grande, pode ter depend√™ncias desnecess√°rias")
    else:
        print("‚úÖ Tamanho do execut√°vel est√° adequado")
    
    return True

def main():
    """Fun√ß√£o principal"""
    print("üéØ PosQuantum Windows Build Script")
    print("=" * 50)
    
    try:
        # Verificar requisitos
        check_requirements()
        print()
        
        # Preparar build
        if not prepare_build():
            return 1
        print()
        
        # Construir execut√°vel
        if not build_executable():
            return 1
        print()
        
        # Verificar execut√°vel
        if not verify_executable():
            return 1
        print()
        
        print("üéâ Build conclu√≠do com sucesso!")
        print("üìÅ Execut√°vel dispon√≠vel em: dist/PosQuantum.exe")
        print()
        print("üîê Funcionalidades inclu√≠das:")
        print("   ‚úÖ 16 abas/m√≥dulos completos")
        print("   ‚úÖ Mais de 70 funcionalidades")
        print("   ‚úÖ Criptografia p√≥s-qu√¢ntica em todas as camadas")
        print("   ‚úÖ ML-KEM, ML-DSA, SPHINCS+ (NIST)")
        print("   ‚úÖ Curva el√≠ptica h√≠brida")
        print("   ‚úÖ Conformidade com certifica√ß√µes")
        
        return 0
        
    except Exception as e:
        print(f"‚ùå Erro inesperado: {e}")
        import traceback
        traceback.print_exc()
        return 1

if __name__ == "__main__":
    sys.exit(main())

